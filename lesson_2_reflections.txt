What happens when you initialize a repository? Why do you need to do it?

When we initialise a repository .git file is created which will contain all the metadata regarding the files in that repository. We need to do it because git can not track changes without initialising the repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?

We may want to include seleccted files for a commit. Git gives us control for that through staging area. Files are added from working directory to staging area and then the commits are made in the repository.

How can you use the staging area to make sure you have one commit per logical change?

We use the git add, git diff and git diff --staged to make sure we have one commit per logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are helpful when we want to make a change but still want to keep the master node intact. This is useful when we want to do some experimentation or want to add a language feature.

How do the diagrams help you visualize the branch structure?

While using the git log command some commits are not shown as they are unreachable. In order to view all commits and the structure we use diagrams.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging the branches takes into account the root node from which the two nodes emerged. A line which is added in either of the two branches but is not there in root node is added to the merged node. A line which is present in the root node but not present in either of the branches is deleted from the merged node.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic merging is useful when the merging is straight-forward. However in  the case of complex merging, we would prefer to do manual merging as we may not want git to make unnecessary change.